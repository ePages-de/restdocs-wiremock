buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE'
    }
}

plugins {
    id 'eclipse'
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'signing'
}

apply plugin: 'org.springframework.boot'

repositories {
    jcenter()
}

sourceCompatibility = 1.7
targetCompatibility = 1.7
group = 'com.epages'
description = 'Spring Boot Starter for adding a WireMock server to your integration test'

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-test'
    compile 'org.springframework.boot:spring-boot-starter'
    compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
    compile 'com.github.tomakehurst:wiremock-standalone:2.18.0'
    testCompile 'org.springframework:spring-web'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

bootRepackage.enabled = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId 'wiremock-spring-boot-starter'
            groupId = project.group
            
            pom {
                  name = 'My Library'
                  description = 'A concise description of my library'
                  url = 'http://www.example.com/library'
                  properties = [
                      myProp: "value",
                      "prop.with.dots": "anotherValue"
                  ]
                  licenses {
                      license {
                          name = 'The Apache License, Version 2.0'
                          url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                      }
                  }
                  developers {
                      developer {
                          id = 'johnd'
                          name = 'John Doe'
                          email = 'john.doe@example.com'
                      }
                  }
                  scm {
                      connection = 'scm:git:git://example.com/my-library.git'
                      developerConnection = 'scm:git:ssh://example.com/my-library.git'
                      url = 'http://example.com/my-library/'
                  }
            }
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

signing {
    sign publishing.publications.mavenJava
    sign configurations.archives
}
